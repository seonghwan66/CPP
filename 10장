--------------------------------7번 함수중복---------------------------------------------------------
#include <iostream>
using namespace std;

int arr_plus(int arr[], int size) {

	int sum = 0;

	for (int i = 0; i < size; i++) {
		sum += arr[i];
	}
	return sum;
}
double arr_plus(double arr[], int size) {

	double sum = 0;

	for (int i = 0; i < size; i++) {
		sum += arr[i];
	}

	return sum;
}

int main() {

	int iarr[] = { 1, 2, 3, 4, 5 };
	double darr[] = { 1.1, 2.2, 3.3, 4.4, 5.5 };

	cout << "정수 배열 합은 " << arr_plus(iarr, 5) << endl;
	cout << "실수 배열 합은 " << arr_plus(darr, 3) << endl;

	return 0;
}
--------------------------------7번 템플릿 일반---------------------------------
#include <iostream>
using namespace std;

template<typename T>

T arr_plus(T arr[], int size) {
	T sum = 0;

	for (int i = 0; i < size; i++) {
		sum += arr[i];
	}
	return sum;
}

int main() {

	int iarr[] = { 1, 2, 3, 4, 5 };
	double darr[] = { 1.1, 2.2, 3.3, 4.4, 5.5 };

	cout << "정수 배열 합은 " << arr_plus(iarr, 5) << endl;
	cout << "실수 배열 합은 " << arr_plus(darr, 3) << endl;

	return 0;
}
--------------------------------5번---------------------------------
#include <iostream>
using namespace std;

template<typename T>

void myswap(T& x, T& y) {
	T tmp = x;
	x = y;
	y = tmp;
}
int main() {
	int a, b, c;
	cout << " 세 정수 입력 : ";
	cin >> a >> b >> c;
	myswap(a, b);
	myswap(b, c);
	cout << "a= " << a << ", b = " << b << ", c = " << c << endl << endl;

	double d, e, f;
	cout << "세 실수 입력 : ";
	cin >> d >> e >> f;
	myswap(d, e);
	myswap(e, f);
	cout << "d = " << d << ", e = " << e << ", f = " << f << endl;

	return 0;
}


--------------------------------10번---------------------------------
#include<iostream>
using namespace std;

template<typename T>

T sum(T a, T b, T c = 0) {
	return a + b + c;
}

int main() {
	cout << "두 수의 합은 " << sum<int>(5, 7) << endl;
	cout << "세 수의 합은 " << sum<int>(5, 7, 8) << endl;
	cout << "세 실수의 합은 " << sum<double>(3.14, 7.99, -1.0) << endl;
}
--------------------------------21번---------------------------------
#include <iostream>
using namespace std;

// 템플릿 클래스 MyStack 선언
template <class T>
class MyStack {
    T data[2];  // 데이터를 저장할 배열
public:
    int tos = -1;  // top of stack (tos) 변수 초기화

    void push(T element) {
        if (tos == 1) {
            cout << "stack full이므로 더 넣지 못합니다." << endl;
        } else {
            tos++;
            data[tos] = element;
        }
    }

    T pop() {
        if (tos == -1) {
            cout << "stack empty - 프로그램을 종료합니다." << endl;
            exit(0);
        }
        return data[tos--];
    }
};

int main() {
    // MyStack 클래스의 인스턴스 생성 (타입: string)
    MyStack<string> sc;

    sc.push("bye");  // "bye"를 스택에 추가
    sc.push("hello");  // "hello"를 스택에 추가
    sc.push("world");  // "world"를 스택에 추가

    cout << "현재 string 스택에 " << sc.tos + 1 << " 개 있음" << endl;
    cout << "맨 위에 있는 " << sc.pop() << " 꺼냄" << endl;
    cout << "맨 위에 있는 " << sc.pop() << " 꺼냄" << endl;
    sc.pop();  // 스택에서 원소 제거

    return 0;
}

T는 사용자가 지정한 타입으로 대체될 수 있습니다.

push 함수:
스택에 원소를 추가하는 함수입니다.
tos 값이 1인 경우에는 "stack full이므로 더 넣지 못합니다."라는 메시지를 출력합니다.
그렇지 않은 경우 tos 값을 증가시키고, 해당 인덱스에 원소를 저장합니다.

pop 함수:
스택에서 원소를 제거하고 반환하는 함수입니다.
tos 값이 -1인 경우에는 "stack empty - 프로그램을 종료합니다."라는 메시지를 출력하고 프로그램을 종료합니다.
그렇지 않은 경우 tos 값을 감소시키고, 해당 인덱스의 원소를 반환합니다.

main 함수:

MyStack 클래스의 인스턴스 sc를 생성합니다. 타입은 string으로 지정합니다.
push 함수를 사용하여 "bye", "hello", "world"를 스택에 추가합니다.
현재 스택에 있는 원소 개수를 출력합니다.
pop 함수를 사용하여 스택의 맨 위에 있는 원소를 꺼내고 출력합니다.
다시 pop 함수를 사용하여 스택의 맨 위에 있는 원소를 꺼내고 출력합니다.
마지막으로 pop 함수를 사용하여 스택에서 원소를 제거합니다.

--------------------------------22번---------------------------------
#include<iostream>
using namespace std;
template <class T>
class MyStack {
	T data[5];
public:
	int tos = -1;
	void push(T element) {
		if (tos == 4) {
			cout << "stack full이므로 더 넣을 수 없습니다." << endl;
		}
		else {
			tos++;
			data[tos] = element;
		}
	}
	T pop() {
		if (tos == -1) {
			cout << "stack empty - 프로그램을 종료합니다." << endl;
			exit(0);
		}
		return data[tos--];
	}
};
int main() {
	MyStack<int> si;
	si.push(100);
	si.push(200);
	si.push(300);
	cout << "현재 정수 스택에 " << si.tos + 1 << " 개 있음" << endl;
	cout << "맨 위에 있는 " << si.pop() << " 꺼냄" << endl;
	cout << "맨 위에 있는 " << si.pop() << " 꺼냄" << endl;
	cout << "현재 정수 스택에 " << si.tos + 1 << " 개 남아있음" << endl << endl;
}




----------------23번------------------------
#include <iostream>
using namespace std;

class Circle {
int radius;
public:
	Circle(int r=1) {	radius = r;		}
	double operator ()()     {
		return 3.141592 * radius * radius;
	} double operator ()(int r)     {
		radius = r;return 3.141592 * radius * radius;
	}
};
int main() {
	Circle donut, pizza(10);
	
	cout<< donut() << " " << pizza() << endl;
	cout<< donut(10) << " " << pizza(100) << endl;
}

----------------28번------------------------

#include<iostream>
#include<map>
using namespace std;

int main() {
	map<string, string> m;

	m.insert(make_pair("고양이", "cat"));
	m.insert(make_pair("고양이", "nyang"));
	m.insert({ "판다","panda" });
	m.insert({ "판다","Po" });
	m["사자"] = "lion";
	m["사자"] = "saja";

	cout << "저장된 동물 수 = " << m.size() << endl;

	for (
		auto it = m.begin();
		it != m.end();
		it++
		)
		cout << it->first << " " << it->second << endl;

	return 0;
}
----------------문자열을 저장하는 벡터 만들기(이름 순 나열)------------------------
#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
using namespace std;

int main() {
	vector<string> v;
	string name;

	cout << "이름을 입력하세요 (종료 : q 혹은 Q)" << endl;
	for (int i = 0; ; i++) {
		cout << ">> ";
		getline(cin, name);

		if (name == "q" || name == "Q") break;
		v.push_back(name);
	}
	if (v.size() == 0) {
		cout << "이름 목록이 새요성되지 않아써습니다. 종료합니다."; return 0;
	}
	cout << v.size() << "개의 이름 목록이 생성되었습니다." << endl;

	sort(v.begin(), v.end());

	for (int i = 0; i < v.size(); i++)	cout << v[i] << endl;
}

----------------------------벡터 기본------------------------------------
#include<iostream>
#include<vector>
using namespace std;

int main() {
	vector<int> v(5, 7);
	cout << "size: " << v.size() << " capacity : " << v.capacity() << endl;

	v.push_back(10);
	v.push_back(20);
	v.push_back(30);

	cout << "size: " << v.size() << " capacity : " << v.capacity() << endl;

	for (int i = 0; i < v.size(); i++) cout << v[i] << " ";
	cout << endl;

	v[0] = 1;
	v.at(2) = 0;

	for (int i = 0; i < v.size(); i++) cout << v[i] << " ";
	cout << endl;

}

----------------------------벡터에서 size()와 capacity()의 차이------------------------------------
#include <iostream>
#include <vector>
using namespace std;
int main() {
	vector<int> v;
	cout << "size: " << v.size() << " ";
	cout << "capacity: " << v.capacity() << endl;
	cout << "----------------------------\n";
	for (int i = 0; i < 10; i++) {
		v.push_back(7);
		cout << "size: " << v.size() << " ";
		cout << "capacity: " << v.capacity() << endl;
	}
	cout << "----------------------------\n";
	for (int i = 0; i < 10; i++) {
		v.pop_back();
		cout << "size: " << v.size() << " ";
		cout << "capacity: " << v.capacity() << endl;
	}
}

----------------------------특정 수 나올 때까지 난수 생성------------------------------------
#include <iostream>
#include <vector>
#include <random>
#include <fstream>
using namespace std;

int main() {
    vector<int> v; // 정수 쌍을 저장할 벡터 선언

    random_device dv; // 시드값 생성
    mt19937 gen(dv()); // 난수 생성기 초기화
    uniform_int_distribution<int> dist(1, 10); // 1부터 10 사이의 정수를 생성할 분포 생성

    int a, b;

    // a와 b가 서로 다른 값을 가질 때까지 반복
    do {
        a = dist(gen);
        b = dist(gen);
        v.push_back(a); // a를 벡터에 추가
        v.push_back(b); // b를 벡터에 추가
    } while (a != b);

    ofstream fout("random.txt"); // 파일 출력 스트림 생성

    if (!fout) { // 파일 열기 실패 시 오류 메시지 출력 후 종료
        cerr << "파일 열기 실패" << endl;
        return 1;
    }

    fout << v.size() / 2 << "개의 정수 쌍이 생성되었습니다." << endl; // 생성된 쌍의 개수 출력

    // 벡터의 요소를 순회하면서 정수 쌍을 파일에 출력
    for (int i = 0; i < v.size(); i += 2)
        fout << "(" << v[i] << "," << v[i + 1] << ")" << endl;

    fout.close(); // 파일 닫기

    return 0;
}
벡터 v를 선언하여 정수 쌍을 저장합니다.
random_device를 사용하여 시드값을 생성합니다.
mt19937을 사용하여 난수 생성기를 초기화합니다.
uniform_int_distribution을 사용하여 1부터 10 사이의 정수를 생성할 분포를 생성합니다.
do-while 루프를 사용하여 a와 b가 서로 다른 값을 가질 때까지 반복합니다.
dist(gen)을 사용하여 1부터 10 사이의 난수를 생성하여 a와 b에 할당합니다.
v 벡터에 a와 b를 순서대로 추가합니다.
"random.txt" 파일을 출력 스트림으로 열고, 열기에 실패한 경우 오류 메시지를 출력하고 프로그램을 종료합니다.
"random.txt" 파일에 생성된 정수 쌍의 개수를 출력합니다.
벡터 v의 요소를 순회하면서 정수 쌍을 파일에 출력합니다.
각 정수 쌍은 괄호로 묶여서 출력됩니다.
파일을 닫고 프로그램을 종료합니다.

----------------------------interator 사용 예제------------------------------------
#include <iostream>
#include <vector>
using namespace std;

int main() {
	vector<int> v = {10, 20, 30, 40, 50};  // 배열처럼초기화가능
	
	vector<int>::iterator it;
	
	for (it = v.begin(); it != v.end(); it++) {
		*it += 1;
		cout<< *it << ' ';
	}
	cout<< endl;
	
	it = v.begin();
	v.insert(it, 100);
	
	for (it = v.begin(); it != v.end(); it++)
		cout<< *it << ' '; cout<< endl;
}


----------------------------map으로 영한 사전 만들------------------------------------
#include <iostream>
#include <string>
#include <map>
using namespace std;

int main() {
    map<string, string> dic; // string을 키로, string을 값으로 갖는 맵 dic 선언

    // 맵에 단어 쌍 추가
    dic.insert(make_pair("kiwil", "키위"));
    dic.insert(make_pair("apple", "사과"));
    dic["cherry"] = "체리";
    dic["carrot"] = "당근";

    cout << "저장된 단어 개수: " << dic.size() << endl; // 저장된 단어 개수 출력

    string eword;
    while (true) {
        cout << "찾고 싶은 영단어: ";
        getline(cin, eword); // 사용자로부터 영단어 입력 받기

        if (eword == "exit")
            break; // 입력이 "exit"인 경우 반복 종료

        if (dic.find(eword) == dic.end())
            cout << "없음" << endl; // 맵에서 해당 단어를 찾지 못한 경우 "없음" 출력
        else
            cout << dic[eword] << endl; // 맵에서 해당 단어의 번역을 출력
    }

    cout << "종료합니다..." << endl;

    return 0;
}


map<string, string> 타입의 dic 맵을 선언합니다. 이 맵은 영단어를 키(key)로, 해당하는 한글 단어를 값(value)로 저장합니다.
insert 함수와 [] 연산자를 사용하여 단어 쌍을 맵에 추가합니다.
dic.size()를 사용하여 저장된 단어 개수를 출력합니다.
무한 루프를 실행하여 사용자로부터 찾고 싶은 영단어를 입력받습니다.
입력이 "exit"인 경우 루프를 종료합니다.
dic.find(eword)를 사용하여 맵에서 해당하는 영단어를 검색합니다. 만약 영단어를 찾지 못한 경우, dic.end()를 반환합니다.
찾은 영단어가 맵에 없는 경우 "없음"을 출력합니다.
찾은 영단어가 맵에 있는 경우, 해당하는 한글 단어를 출력합니다.
"종료합니다..."를 출력하고 프로그램을 종료합니다.
