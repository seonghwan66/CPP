--------------------------------7번 함수중복---------------------------------------------------------

#include <iostream>
using namespace std;

// 정수 배열의 합
int arr_plus(int arr[], int size) {

	int sum = 0;

	for (int i = 0; i < size; i++) {
		sum += arr[i];
	}
	return sum;
}

// 실수 배열의 합
double arr_plus(double arr[], int size) {

	double sum = 0;

	for (int i = 0; i < size; i++) {
		sum += arr[i];
	}

	return sum;
}

int main() {

	int iarr[] = { 1, 2, 3, 4, 5 };
	double darr[] = { 1.1, 2.2, 3.3, 4.4, 5.5 };

	cout << "정수 배열 합은 " << arr_plus(iarr, 5) << endl; // 정수 배열의 합을 계산하여 출력, 배열의 크기 5로 주어짐.
	cout << "실수 배열 합은 " << arr_plus(darr, 3) << endl; // 실수 배열의 합을 계산하여 출력, 배열의 크기 3으로 주어짐.

	return 0;
}

--------------------------------7번 템플릿 일반---------------------------------
// 위의 함수 중복이랑 비교하며 공부할 것.
#include <iostream>
using namespace std;

template<typename T>

T arr_plus(T arr[], int size) {
	T sum = 0;

	for (int i = 0; i < size; i++) {
		sum += arr[i];
	}
	return sum;
}

int main() {

	int iarr[] = { 1, 2, 3, 4, 5 };
	double darr[] = { 1.1, 2.2, 3.3, 4.4, 5.5 };

	cout << "정수 배열 합은 " << arr_plus(iarr, 5) << endl;
	cout << "실수 배열 합은 " << arr_plus(darr, 3) << endl;

	return 0;
}

--------------------------------5번---------------------------------

#include <iostream>
using namespace std;

template<typename T>

void myswap(T& x, T& y) {
	T tmp = x;
	x = y;
	y = tmp;
}
int main() {
	int a, b, c;
	cout << " 세 정수 입력 : ";
	cin >> a >> b >> c;
	myswap(a, b);
	myswap(b, c);
	cout << "a= " << a << ", b = " << b << ", c = " << c << endl << endl;

	double d, e, f;
	cout << "세 실수 입력 : ";
	cin >> d >> e >> f;
	myswap(d, e);
	myswap(e, f);
	cout << "d = " << d << ", e = " << e << ", f = " << f << endl;

	return 0;
}

--------------------------------10번---------------------------------

#include<iostream>
using namespace std;

template<typename T>

T sum(T a, T b, T c = 0) {
	return a + b + c;
}

int main() {
	cout << "두 수의 합은 " << sum<int>(5, 7) << endl;
	cout << "세 수의 합은 " << sum<int>(5, 7, 8) << endl;
	cout << "세 실수의 합은 " << sum<double>(3.14, 7.99, -1.0) << endl;
}

--------------------------------21번---------------------------------

#include <iostream>
using namespace std;

// 템플릿 클래스 MyStack 선언
template <class T>
class MyStack {
    T data[2];  // 데이터를 저장할 배열
public:
    int tos = -1;  // top of stack (tos) 변수 초기화

    void push(T element) {
        if (tos == 1) {
            cout << "stack full이므로 더 넣지 못합니다." << endl;
        } else {
            tos++;
            data[tos] = element;
        }
    }

    T pop() {
        if (tos == -1) {
            cout << "stack empty - 프로그램을 종료합니다." << endl;
            exit(0);
        }
        return data[tos--];
    }
};

int main() {
    // MyStack 클래스의 인스턴스 생성 (타입: string)
    MyStack<string> sc;

    sc.push("bye");  // "bye"를 스택에 추가
    sc.push("hello");  // "hello"를 스택에 추가
    sc.push("world");  // "world"를 스택에 추가

    cout << "현재 string 스택에 " << sc.tos + 1 << " 개 있음" << endl;
    cout << "맨 위에 있는 " << sc.pop() << " 꺼냄" << endl;
    cout << "맨 위에 있는 " << sc.pop() << " 꺼냄" << endl;
    sc.pop();  // 스택에서 원소 제거

    return 0;
}

T는 사용자가 지정한 타입으로 대체될 수 있습니다.

push 함수:
스택에 원소를 추가하는 함수입니다.
tos 값이 1인 경우에는 "stack full이므로 더 넣지 못합니다."라는 메시지를 출력합니다.
그렇지 않은 경우 tos 값을 증가시키고, 해당 인덱스에 원소를 저장합니다.

pop 함수:
스택에서 원소를 제거하고 반환하는 함수입니다.
tos 값이 -1인 경우에는 "stack empty - 프로그램을 종료합니다."라는 메시지를 출력하고 프로그램을 종료합니다.
그렇지 않은 경우 tos 값을 감소시키고, 해당 인덱스의 원소를 반환합니다.

main 함수:

MyStack 클래스의 인스턴스 sc를 생성합니다. 타입은 string으로 지정합니다.
push 함수를 사용하여 "bye", "hello", "world"를 스택에 추가합니다.
현재 스택에 있는 원소 개수를 출력합니다.
pop 함수를 사용하여 스택의 맨 위에 있는 원소를 꺼내고 출력합니다.
다시 pop 함수를 사용하여 스택의 맨 위에 있는 원소를 꺼내고 출력합니다.
마지막으로 pop 함수를 사용하여 스택에서 원소를 제거합니다.

--------------------------------22번---------------------------------

#include<iostream>
using namespace std;
template <class T>
class MyStack {
	T data[5];
public:
	int tos = -1;
	void push(T element) {
		if (tos == 4) {
			cout << "stack full이므로 더 넣을 수 없습니다." << endl;
		}
		else {
			tos++;
			data[tos] = element;
		}
	}
	T pop() {
		if (tos == -1) {
			cout << "stack empty - 프로그램을 종료합니다." << endl;
			exit(0);
		}
		return data[tos--];
	}
};
int main() {
	MyStack<int> si;
	si.push(100);
	si.push(200);
	si.push(300);
	cout << "현재 정수 스택에 " << si.tos + 1 << " 개 있음" << endl;
	cout << "맨 위에 있는 " << si.pop() << " 꺼냄" << endl;
	cout << "맨 위에 있는 " << si.pop() << " 꺼냄" << endl;
	cout << "현재 정수 스택에 " << si.tos + 1 << " 개 남아있음" << endl << endl;
}

----------------23번------------------------

#include <iostream>
using namespace std;

class Circle {
int radius;
public:
	Circle(int r=1) {	radius = r;		}
	double operator ()()     {
		return 3.141592 * radius * radius;
	} double operator ()(int r)     {
		radius = r;return 3.141592 * radius * radius;
	}
};
int main() {
	Circle donut, pizza(10);
	
	cout<< donut() << " " << pizza() << endl;
	cout<< donut(10) << " " << pizza(100) << endl;
}

----------------28번------------------------

#include<iostream>
#include<map>
using namespace std;

int main() {
	map<string, string> m;

	m.insert(make_pair("고양이", "cat"));
	m.insert(make_pair("고양이", "nyang"));
	m.insert({ "판다","panda" });
	m.insert({ "판다","Po" });
	m["사자"] = "lion";
	m["사자"] = "saja";

	cout << "저장된 동물 수 = " << m.size() << endl;

	for (
		auto it = m.begin();
		it != m.end();
		it++
		)
		cout << it->first << " " << it->second << endl;

	return 0;
}

----------------문자열을 저장하는 벡터 만들기(이름 순 나열)------------------------

#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
using namespace std;

int main() {
	vector<string> v;
	string name;

	cout << "이름을 입력하세요 (종료 : q 혹은 Q)" << endl;
	for (int i = 0; ; i++) {
		cout << ">> ";
		getline(cin, name);

		if (name == "q" || name == "Q") break;
		v.push_back(name);
	}
	if (v.size() == 0) {
		cout << "이름 목록이 새요성되지 않아써습니다. 종료합니다."; return 0;
	}
	cout << v.size() << "개의 이름 목록이 생성되었습니다." << endl;

	sort(v.begin(), v.end());

	for (int i = 0; i < v.size(); i++)	cout << v[i] << endl;
}

----------------------------실수 vector 예제------------------------------------

#include <iostream>
#include <vector>
#include <string>
using namespace std;
int main() {
	vector<string> v = { "아이스티", "초코우유", "하이볼", "아이스 아메리카노" }; /* 일반 배열처럼 초기화 가능 */
	v.push_back("우유"); // vector의 끝요소에 우유 추가
	for (auto n : v) cout << n << " "; /* 벡터의 v의 모든 요소에 대해 반복, auto 키워드는 요소의 자료형을 자동으로 추론하도록함. 일반 배열처럼 for-each문 가능 */
	cout << endl;
	cout << v.size() << endl;
	v.pop_back(); // 벡터 v의 마지막 요소 제거
	v.pop_back(); // 벡터 v의 마지막 요소 한 번 더 제거
	for (auto n : v) cout << n << " "; // 벡터의 v의 모든 요소에 대해 반복, auto 키워드는 요소의 자료형을 자동으로 추론하도록함.
	cout << endl;
	cout << v.size() << endl; // 벡터 v의 크기 출력, 벡터의 크기는 요소의 개수를 나타냄.
}

----------------------------벡터 기본------------------------------------

#include<iostream>
#include<vector>
using namespace std;

int main() {
	vector<int> v(5, 7);
	cout << "size: " << v.size() << " capacity : " << v.capacity() << endl;

	v.push_back(10);
	v.push_back(20);
	v.push_back(30);

	cout << "size: " << v.size() << " capacity : " << v.capacity() << endl;

	for (int i = 0; i < v.size(); i++) cout << v[i] << " ";
	cout << endl;

	v[0] = 1;
	v.at(2) = 0;

	for (int i = 0; i < v.size(); i++) cout << v[i] << " ";
	cout << endl;

}

----------------------------벡터에서 size()와 capacity()의 차이------------------------------------

#include <iostream>
#include <vector>
using namespace std;
int main() {
	vector<int> v;
	cout << "size: " << v.size() << " "; // 벡터의 크기 출력 초기값 0
	cout << "capacity: " << v.capacity() << endl; // 벡터의 용량 출력 초기값 0
	cout << "----------------------------\n";
	for (int i = 0; i < 10; i++) {
		v.push_back(7); // push_back을 통해 vector에 요소 7 추가
		cout << "size: " << v.size() << " "; // for문으로 10번 반복하며 벡터의 크기 출력
		cout << "capacity: " << v.capacity() << endl; // for문으로 10번 반복하며 벡터의 용량 출력
	}
	cout << "----------------------------\n";
	for (int i = 0; i < 10; i++) {
		v.pop_back(); // pop_back을 통해 벡터의 마지막 요소 제거
		cout << "size: " << v.size() << " "; // for문으로 10번 반복하며 벡터의 크기 출력
		cout << "capacity: " << v.capacity() << endl; // for문으로 10번 반복하며 벡터의 용량 출력
	}
}
v.push_back을 통해 요소를 추가하면 벡터의 크기가 증가하고, 필요에 따라 용량이 자동으로 증가됨.
v.pop_back을 통해 요소를 제거하면 벡터의 크기가 감소하지만, 용량은 변하지 않음.

----------------------------특정 수 나올 때까지 난수 생성------------------------------------

#include <iostream>
#include <vector>
#include <random>
#include <fstream>
using namespace std;

int main() {
    vector<int> v; // 정수 쌍을 저장할 벡터 선언

    random_device dv; // 시드값 생성
    mt19937 gen(dv()); // 난수 생성기 초기화
    uniform_int_distribution<int> dist(1, 10); // 1부터 10 사이의 정수를 생성할 분포 생성

    int a, b;

    // a와 b가 서로 다른 값을 가질 때까지 반복
    do {
        a = dist(gen);
        b = dist(gen);
        v.push_back(a); // a를 벡터에 추가
        v.push_back(b); // b를 벡터에 추가
    } while (a != b);

    ofstream fout("random.txt"); // 파일 출력 스트림 생성

    if (!fout) { // 파일 열기 실패 시 오류 메시지 출력 후 종료
        cerr << "파일 열기 실패" << endl;
        return 1;
    }

    fout << v.size() / 2 << "개의 정수 쌍이 생성되었습니다." << endl; // 생성된 쌍의 개수 출력

    // 벡터의 요소를 순회하면서 정수 쌍을 파일에 출력
    for (int i = 0; i < v.size(); i += 2)
        fout << "(" << v[i] << "," << v[i + 1] << ")" << endl;

    fout.close(); // 파일 닫기

    return 0;
}
벡터 v를 선언하여 정수 쌍을 저장합니다.
random_device를 사용하여 시드값을 생성합니다.
mt19937을 사용하여 난수 생성기를 초기화합니다.
uniform_int_distribution을 사용하여 1부터 10 사이의 정수를 생성할 분포를 생성합니다.
do-while 루프를 사용하여 a와 b가 서로 다른 값을 가질 때까지 반복합니다.
dist(gen)을 사용하여 1부터 10 사이의 난수를 생성하여 a와 b에 할당합니다.
v 벡터에 a와 b를 순서대로 추가합니다.
"random.txt" 파일을 출력 스트림으로 열고, 열기에 실패한 경우 오류 메시지를 출력하고 프로그램을 종료합니다.
"random.txt" 파일에 생성된 정수 쌍의 개수를 출력합니다.
벡터 v의 요소를 순회하면서 정수 쌍을 파일에 출력합니다.
각 정수 쌍은 괄호로 묶여서 출력됩니다.
파일을 닫고 프로그램을 종료합니다.

----------------------------interator 사용 예제------------------------------------

#include <iostream>
#include <vector>
using namespace std;

int main() {
	vector<int> v = {10, 20, 30, 40, 50};  // 배열처럼초기화가능
	
	vector<int>::iterator it;
	
	for (it = v.begin(); it != v.end(); it++) {
		*it += 1;
		cout<< *it << ' ';
	}
	cout<< endl;
	
	it = v.begin();
	v.insert(it, 100);
	
	for (it = v.begin(); it != v.end(); it++)
		cout<< *it << ' '; cout<< endl;
}

----------------------------map으로 영한 사전 만들------------------------------------

#include <iostream>
#include <string>
#include <map>
using namespace std;

int main() {
    map<string, string> dic; // string을 키로, string을 값으로 갖는 맵 dic 선언

    // 맵에 단어 쌍 추가
    dic.insert(make_pair("kiwil", "키위"));
    dic.insert(make_pair("apple", "사과"));
    dic["cherry"] = "체리";
    dic["carrot"] = "당근";

    cout << "저장된 단어 개수: " << dic.size() << endl; // 저장된 단어 개수 출력

    string eword;
    while (true) {
        cout << "찾고 싶은 영단어: ";
        getline(cin, eword); // 사용자로부터 영단어 입력 받기

        if (eword == "exit")
            break; // 입력이 "exit"인 경우 반복 종료

        if (dic.find(eword) == dic.end())
            cout << "없음" << endl; // 맵에서 해당 단어를 찾지 못한 경우 "없음" 출력
        else
            cout << dic[eword] << endl; // 맵에서 해당 단어의 번역을 출력
    }

    cout << "종료합니다..." << endl;

    return 0;
}


map<string, string> 타입의 dic 맵을 선언합니다. 이 맵은 영단어를 키(key)로, 해당하는 한글 단어를 값(value)로 저장합니다.
insert 함수와 [] 연산자를 사용하여 단어 쌍을 맵에 추가합니다.
dic.size()를 사용하여 저장된 단어 개수를 출력합니다.
무한 루프를 실행하여 사용자로부터 찾고 싶은 영단어를 입력받습니다.
입력이 "exit"인 경우 루프를 종료합니다.
dic.find(eword)를 사용하여 맵에서 해당하는 영단어를 검색합니다. 만약 영단어를 찾지 못한 경우, dic.end()를 반환합니다.
찾은 영단어가 맵에 없는 경우 "없음"을 출력합니다.
찾은 영단어가 맵에 있는 경우, 해당하는 한글 단어를 출력합니다.
"종료합니다..."를 출력하고 프로그램을 종료합니다.

-------------------------------------------------------------auto를 이용한 변수 선언 예제-------------------------------------------------------------

#include <iostream>
#include <vector>
using namespace std;

int square(int x) { return x * x; }
int main() {
	auto c = 'a';
	auto pi = 3.14;
	auto ten = 10;
	auto* p = &ten;

	cout << c << " " << pi << " " << ten << " " << p << " " << *p << endl;

	auto ret = square(3);
	cout << ret << endl;

	vector<int> v = { 10,20,30,40,50 };
	vector<int>::iterator it;
	for (it = v.begin(); it != v.end(); it++) cout << *it << " ";
	cout << endl;
}

-------------------------------------------------------------10장 29번-------------------------------------------------------------

#include <iostream> // 입출력에 대한 헤더파일
#include<string> // string에 대한 헤더파일 (getline(), strcmp() ,,,등등)
#include<fstream> // 파입 입출력에 대한 헤더파일
#include<map> // map 함수를 사용하기 위함. vector를 사용하기 위해서는 <vector>
using namespace std; // Standard Template Library(STL)이 선언된 이름 공간을 사용하기 위해 선언.

int main() {

    map<string, string> m; // map이라는 C++ 표준 라이브러리(STL)에 정의된 클래스 템플릿을 통해 객체 m생성 (키 값의 타입과 value값의 타입 모두 string)
    //m은 동일한 key값을 가질 수 없다. m은 내부에서 자동으로 오름차순 식으로 정렬이 된다.
    
    ofstream fout("capital.txt"); // 파일을 쓰기 위한 객체 생성(생성과 동시에 "capital.txt"의 기본값을 가짐)
    string country, capital; // country, capital이라는 string 타입의 변수 생성
    char choice; // 이후 사용자로부터 y/n를 입력받을 char 타입의 변수 생성
    
    while (true) { // while 반복문 실행
    
        cout << "나라 수도 : "; //사용자로부터 나라 수도를 받기 위함
        cin >> country; // 나라 이름 받기 -> m의 key값으로 들어갈 예정
	
        if (country == "exit") { // 나라 이름, key값이 exit라면 이전까지 m에 저장된 key와 value(나라 수도)를 capital.txt에 쓰기 위함.
            for (auto it = m.begin(); it != m.end(); it++) { // 반복문을 it 이라는 포인터(map에서 주로 쓰임 -> map은 배열의 형식이 아니기 때문에 포인터의 도움이 필요)를 통해 it의 초깃값을 
               // m의 시작주소로 설정, it이 m의 끝주소를 만날 시 반복문 종료. it++은 포인터가 다음 주소를 가리키게하기 위한 역할
                fout << it->first << " " << it->second << endl; // it은 포인터이기에 '->'를 통해 가리킬 수 있으며, first와 second 멤버함수를 통해 각각은 it이 m의 key, value를 가리킬 수 있게함.
                // fout객체를 통해 파일에 m의 key값, value값을 시작주소부터 끝주소까지 순서대로 삽입
            }

            fout.close(); //fout객체를 사용했으니 닫아주자.
	    
            cout << m.size() << " 나라의 수도 정보를 capital.txt에 저장하였습니다. 감사합니다."; // m의 Key 값인 country가 사용자로부터 exit를 입력 받았을 시 이전에 m에 저장되어 있던 내용들을
            // capital.txt에 쓰고, m.size()를 통해 m의 크기를 반환해주며 종료멘트 출력함. -> m은 내부적으로 오름차순으로 정렬하기에, 따로 sort 함수를 사용하여 오름차순으로 정렬할 필요x
            break; // while(true) 반복문 종료
    }
        cin >> capital; // 수도를 입력받음 -> m의 value값으로 사용. 수도를 위 조건문 이후에 따로 작성한 이유는 사용자가 입력할 때 먼저 저장될 곳은 country 변수이며,
        // country에서 exit를 만났을 때 바로 종료해야 수도를 입력하지 않고 종료시킬 수 있음 -> 이는 나라와 수도 둘 다 m에 저장하지 않기 위함.

        if (m.count(country) == 0) { // 사용자로부터 입력 받은 나라의 이름이 m의 Key 안에 존재한다면 1의 값을 반환할 것이므로, m.count(country) == 0 이 뜻은 사용자가 입력한 나라의 이름이 존재하지 않는다는 뜻
            m.insert({ country, capital }); // 따라서 key의 중복을 고려하지 않아도 된다. -> insert
        }

        else if (m.count(country) == 1) { // 입력 받은 나라의 이름이 m의 key값으로 존재한다는 뜻
            cout << "이미 등록된 나라입니다. 수정할까요? (y/n) : "; // char choice로 받을 예정
            cin >> choice;
            if (choice == 'y') { // y일 경우 입력한대로 나라와 수도 수정
                m[country] = capital; // 입력 받은 나라와 수도를 m의 key, value 값으로 설정
            }
        }
    }
}
