-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
###this->###

class Person {
private:
    string name;

public:
    void setName(const string& name) {
        this->name = name;
    }

    void printName() {
        cout << "My name is: " << this->name << endl;
    }

    bool isSamePerson(Person* otherPerson) {
        return this == otherPerson;
    }
};

int main() {
    Person person1;
    person1.setName("Alice");

    Person person2;
    person2.setName("Bob");

    person1.printName(); // Output: My name is: Alice
    person2.printName(); // Output: My name is: Bob

    if (person1.isSamePerson(&person2)) {
        cout << "They are the same person." << endl;
    } else {
        cout << "They are different persons." << endl;
    }

    return 0;
}

setName 함수에서 this->name은 멤버 변수 name을 가리킵니다. 이를 통해 매개변수 name과 멤버 변수 name을 구분하여 이름 충돌을 피합니다.
printName 함수에서 this->name은 현재 객체의 name 멤버 변수에 접근합니다.
isSamePerson 함수에서 this는 현재 객체의 주소를 가리킵니다. this == otherPerson를 사용하여 현재 객체와 다른 객체 otherPerson의 주소를 비교합니다.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Counter {
private:
    int count;

public:
    Counter(int count) {
        this->count = count;
    }

    void increment() {
        this->count++;
    }

    void printCount() {
        cout << "Current count: " << this->count << endl;
    }

    Counter* getCurrentCounter() {
        return this;
    }
};

int main() {
    Counter counter(0);
    counter.increment();
    counter.printCount(); // Output: Current count: 1

    Counter* current = counter.getCurrentCounter();
    current->increment();
    current->printCount(); // Output: Current count: 2

    return 0;
}
increment 함수에서 this->count는 멤버 변수 count에 접근하여 값을 증가시킵니다.
printCount 함수에서 this->count는 현재 객체의 count 멤버 변수에 접근하여 값을 출력합니다.
getCurrentCounter 함수에서 return this;를 사용하여 현재 객체의 주소를 반환합니다. 이를 통해 현재 객체를 다른 함수에 전달하거나 연쇄적인 멤버 함수 호출에서 사용할 수 있습니다.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Person {
private:
    string name;
    int age;

public:
    Person(const string& name, int age) {
        this->name = name;
        this->age = age;
    }

    Person& setName(const string& name) {
        this->name = name;
        return *this;
    }

    Person& setAge(int age) {
        this->age = age;
        return *this;
    }

    void printInfo() const {
        cout << "Name: " << name << ", Age: " << age << endl;
    }
};

int main() {
    Person person("Alice", 25);
    person.printInfo(); // Output: Name: Alice, Age: 25

    person.setName("Bob").setAge(30);
    person.printInfo(); // Output: Name: Bob, Age: 30

    return 0;
}
setName 함수와 setAge 함수에서 return *this;를 사용하여 현재 객체의 주소를 반환합니다.
setName("Bob").setAge(30);와 같이 연쇄적인 멤버 함수 호출을 사용할 수 있습니다. setName 함수에서 this를 반환하고, 반환된 객체에서 setAge 함수를 호출합니다.
이를 통해 연쇄적인 멤버 함수 호출이 가능하며, 여러 개의 멤버 변수를 설정할 때 유용하게 사용할 수 있습니다.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
###포인터###
#include <iostream>
using namespace std;

int main() {
    int num = 10; // 정수형 변수 선언 및 초기화
    int* ptr; // 정수형 포인터 선언

    ptr = &num; // 포인터에 변수의 메모리 주소를 할당

    cout << "num의 값: " << num << endl;
    cout << "num의 메모리 주소: " << &num << endl;
    cout << "ptr이 가리키는 값: " << *ptr << endl;
    cout << "ptr의 값(메모리 주소): " << ptr << endl;

    *ptr = 20; // 포인터를 통해 변수의 값을 수정

    cout << "변경된 num의 값: " << num << endl;

    return 0;
}
--------------------------------------------------
num의 값: 10
num의 메모리 주소: 0x7ffebf836e2c
ptr이 가리키는 값: 10
ptr의 값(메모리 주소): 0x7ffebf836e2c
변경된 num의 값: 20
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
###인덱스###

#include <iostream>

int main() {
    int numbers[] = {10, 20, 30, 40, 50};

    // 인덱스를 사용하여 배열의 요소에 접근하고 출력
    for (int i = 0; i < 5; i++) {
        std::cout << "numbers[" << i << "] = " << numbers[i] << std::endl;
    }

    return 0;
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
###참조변수###

#include <iostream>

int main() {
    int number = 10;
    int& ref = number;  // 참조 변수 ref를 선언하고 number를 참조

    std::cout << "number: " << number << std::endl;  // number 값 출력
    std::cout << "ref: " << ref << std::endl;        // ref 값 출력

    ref = 20;  // ref를 통해 값을 변경

    std::cout << "number: " << number << std::endl;  // 변경된 number 값 출력
    std::cout << "ref: " << ref << std::endl;        // 변경된 ref 값 출력

    return 0;
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
