--------------------------------7번 함수중복---------------------------------------------------------
#include <iostream>
using namespace std;

int arr_plus(int arr[], int size) {

	int sum = 0;

	for (int i = 0; i < size; i++) {
		sum += arr[i];
	}
	return sum;
}
double arr_plus(double arr[], int size) {

	double sum = 0;

	for (int i = 0; i < size; i++) {
		sum += arr[i];
	}

	return sum;
}

int main() {

	int iarr[] = { 1, 2, 3, 4, 5 };
	double darr[] = { 1.1, 2.2, 3.3, 4.4, 5.5 };

	cout << "정수 배열 합은 " << arr_plus(iarr, 5) << endl;
	cout << "실수 배열 합은 " << arr_plus(darr, 3) << endl;

	return 0;
}
--------------------------------7번 템플릿 일반---------------------------------
#include <iostream>
using namespace std;

template<typename T>

T arr_plus(T arr[], int size) {
	T sum = 0;

	for (int i = 0; i < size; i++) {
		sum += arr[i];
	}
	return sum;
}

int main() {

	int iarr[] = { 1, 2, 3, 4, 5 };
	double darr[] = { 1.1, 2.2, 3.3, 4.4, 5.5 };

	cout << "정수 배열 합은 " << arr_plus(iarr, 5) << endl;
	cout << "실수 배열 합은 " << arr_plus(darr, 3) << endl;

	return 0;
}
--------------------------------5번---------------------------------
#include <iostream>
using namespace std;

template<typename T>

void myswap(T& x, T& y) {
	T tmp = x;
	x = y;
	y = tmp;
}
int main() {
	int a, b, c;
	cout << " 세 정수 입력 : ";
	cin >> a >> b >> c;
	myswap(a, b);
	myswap(b, c);
	cout << "a= " << a << ", b = " << b << ", c = " << c << endl << endl;

	double d, e, f;
	cout << "세 실수 입력 : ";
	cin >> d >> e >> f;
	myswap(d, e);
	myswap(e, f);
	cout << "d = " << d << ", e = " << e << ", f = " << f << endl;

	return 0;
}


--------------------------------10번---------------------------------
#include<iostream>
using namespace std;

template<typename T>

T sum(T a, T b, T c = 0) {
	return a + b + c;
}

int main() {
	cout << "두 수의 합은 " << sum<int>(5, 7) << endl;
	cout << "세 수의 합은 " << sum<int>(5, 7, 8) << endl;
	cout << "세 실수의 합은 " << sum<double>(3.14, 7.99, -1.0) << endl;
}



--------------------------------22번---------------------------------
#include<iostream>
using namespace std;
template <class T>
class MyStack {
	T data[5];
public:
	int tos = -1;
	void push(T element) {
		if (tos == 4) {
			cout << "stack full이므로 더 넣을 수 없습니다." << endl;
		}
		else {
			tos++;
			data[tos] = element;
		}
	}
	T pop() {
		if (tos == -1) {
			cout << "stack empty - 프로그램을 종료합니다." << endl;
			exit(0);
		}
		return data[tos--];
	}
};
int main() {
	MyStack<int> si;
	si.push(100);
	si.push(200);
	si.push(300);
	cout << "현재 정수 스택에 " << si.tos + 1 << " 개 있음" << endl;
	cout << "맨 위에 있는 " << si.pop() << " 꺼냄" << endl;
	cout << "맨 위에 있는 " << si.pop() << " 꺼냄" << endl;
	cout << "현재 정수 스택에 " << si.tos + 1 << " 개 남아있음" << endl << endl;
}


--------------------------------21번---------------------------------
#include <iostream>
using namespace std;

template <class T> class MyStack {
	T data[2];
public:
	int tos = -1;
	void push(T element) {
		if (tos == 1) {
			cout << "stack full이므로 더 넣지 못합니다." << endl;
		}
		else {
			tos++;
			data[tos] = element;
		}
	}
	T pop() {
		if (tos == -1) {
			cout << "stack empty - 프로그램을 종료합니다." << endl;
			exit(0);
		}
		return data[tos--];
	}
};
int main() {
	MyStack<string> sc;
	sc.push("bye");
	sc.push("hello");
	sc.push("world");
	cout << "현재 string 스택에 " << sc.tos + 1 << " 개 있음" << endl;
	cout << "맨 위에 있는 " << sc.pop() << " 꺼냄" << endl;
	cout << "맨 위에 있는 " << sc.pop() << " 꺼냄" << endl;
	sc.pop();
}




----------------문자열을 저장하는 벡터 만들기(이름 순 나열)------------------------
#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
using namespace std;

int main() {
	vector<string> v;
	string name;

	cout << "이름을 입력하세요 (종료 : q 혹은 Q)" << endl;
	for (int i = 0; ; i++) {
		cout << ">> ";
		getline(cin, name);

		if (name == "q" || name == "Q") break;
		v.push_back(name);
	}
	if (v.size() == 0) {
		cout << "이름 목록이 새요성되지 않아써습니다. 종료합니다."; return 0;
	}
	cout << v.size() << "개의 이름 목록이 생성되었습니다." << endl;

	sort(v.begin(), v.end());

	for (int i = 0; i < v.size(); i++)	cout << v[i] << endl;
}

----------------------------벡터 기본------------------------------------
#include<iostream>
#include<vector>
using namespace std;

int main() {
	vector<int> v(5, 7);
	cout << "size: " << v.size() << " capacity : " << v.capacity() << endl;

	v.push_back(10);
	v.push_back(20);
	v.push_back(30);

	cout << "size: " << v.size() << " capacity : " << v.capacity() << endl;

	for (int i = 0; i < v.size(); i++) cout << v[i] << " ";
	cout << endl;

	v[0] = 1;
	v.at(2) = 0;

	for (int i = 0; i < v.size(); i++) cout << v[i] << " ";
	cout << endl;

}

----------------------------벡터에서 size()와 capacity()의 차이------------------------------------
#include <iostream>
#include <vector>
using namespace std;
int main() {
	vector<int> v;
	cout << "size: " << v.size() << " ";
	cout << "capacity: " << v.capacity() << endl;
	cout << "----------------------------\n";
	for (int i = 0; i < 10; i++) {
		v.push_back(7);
		cout << "size: " << v.size() << " ";
		cout << "capacity: " << v.capacity() << endl;
	}
	cout << "----------------------------\n";
	for (int i = 0; i < 10; i++) {
		v.pop_back();
		cout << "size: " << v.size() << " ";
		cout << "capacity: " << v.capacity() << endl;
	}
}
