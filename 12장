--------------------------------------------------------1번--------------------------------------------------------
#include <iostream>
#include <fstream>
using namespace std;

int main() {

	string name, dept;
	int sid;

	cout << "이름: "; cin >> name;
	cout << "학번: "; cin >> sid;
	cout << "학과: "; cin >> dept;

	ofstream fout("student.txt");

	if (!fout) {
		cout << "파일 열기 실패";
		return 0;
	}

	fout << name << '\n';
	fout << sid << "\n";
	fout << dept << endl;
	fout.close();
}
--------------------------------------------------------2번--------------------------------------------------------
#include <iostream>
#include <fstream>
#define N 10
using namespace std;

int main() {
    int a[N];
    ifstream fa("a.txt");
    ofstream fb("b.txt");

    if (!fa || !fb) {
        cerr << "파일 열기 실패" << endl;
        return 1;
    }

    for (int i = 0; i < N; i++) {
        fa >> a[i];
    }

    for (int i = N - 1; i >= 0; i--) {
        fb << a[i] << endl;
    }

    fa.close();
    fb.close();

    cout << "처리 완료. b.txt를 열어서 결과를 확인하세요." << endl;

    return 0;
}
--------------------------------------------------------3번--------------------------------------------------------
#include <iostream>
#include <fstream>
using namespace std;

int main() {
    char source[] = "source.txt"; // 복사할 파일의 이름
    ifstream fin(source);
    ofstream fout("copy.txt");
    
    if (!fin || !fout) {
        cout << source << " 열기 오류" << endl;
        return 0;
    }
    int count = 0; // 읽은 바이트 수를 저장하는 변수
    int c; // 파일로부터 읽은 문자를 저장할 변수
    
    while ((c = fin.get()) != EOF) { // 파일로부터 문자를 읽어들이는 반복문
        cout << (char)c; // 읽은 문자를 콘솔에 출력
        fout.put(c); // 읽은 문자를 출력 파일에 쓰기
        count++; // 읽은 바이트 수 증가
    }
    
    cout << "---------------------------" << endl;
    cout << "읽은 바이트 수는 " << count << endl; // 읽은 바이트 수 출력
    
    fin.close();
    fout.close();
    
    return 0;
}
--------------------------------------------------------4번--------------------------------------------------------
#include <iostream>
#include <fstream>
#include <string>
using namespace std;

int main() {
    ifstream fin("source.txt");
    ofstream fout("copy.txt");

    if (!fin || !fout) {
        cerr << "열기 실패" << endl;
        return 0;
    }    
    string s; // 입력 받은 라인을 저장할 문자열 변수
    int n = 0; // 라인 수를 저장하는 변수

    while (getline(fin, s)) { // 파일에서 한 라인씩 읽어오는 반복문
        cout << n++ << " ==> " << s << endl; // 읽은 라인 번호와 내용을 콘솔에 출력
        fout << s << endl; // 읽은 라인을 출력 파일에 쓰기
    }
    cout << "------------------" << endl;
    cout << "총 " << n << " 라인" << endl; // 총 라인 수 출력
    fin.close();
    fout.close();

    return 0; // 프로그램 종료
}
--------------------------------------------------------5번--------------------------------------------------------
#include <iostream>
#include <fstream>
#include <string>
using namespace std;

int main() {
	ifstream fin("a.txt");
	if (!fin) { cerr << "파일을 열 수가 없어요"; return 0; }

	string atxt;
	getline(fin, atxt, '&');
	cout << atxt << endl << endl; fin.close();

	string f;
	int count = 0;

	cout << "찾는 문구: ";
	getline(cin, f);

	int sindex = 0;

	while (true) {
		int findex = atxt.find(f, sindex);
		if (findex == -1) break;
		count++;
		sindex = findex + f.length();
	}
	cout << count << "개 찾았습니다." << endl;
}
--------------------------------------------------------6번--------------------------------------------------------
#include<iostream>
#include<fstream>
#include<iomanip>
#include<algorithm>
#include<string>
using namespace std;

int main() {
    // 입력 파일 및 출력 파일 열기
    ifstream fin("score.txt");
    ofstream fout("result.txt");

    // 파일 열기 실패 시 오류 메시지 출력 후 종료
    if (!fin || !fout) {
        cerr << "파일 열기 실패" << endl;
        return 1;
    }

    string name;
    double score;
    double sum = 0;
    double max_score = 0;
    int count = 0;

    // 파일에서 이름과 점수를 읽어 합계, 최고 점수, 학생 수 계산
    while (fin >> name >> score) {
        sum += score;
        max_score = max(max_score, score);
        count++;
    }

    // 평균 계산
    double avg = sum / count;

    // 결과를 result.txt에 출력
    fout << fixed << setprecision(2) << "합계 : " << sum << endl;
    fout << fixed << setprecision(2) << "평균 : " << avg << endl;
    fout << fixed << setprecision(2) << "최고 점수 : " << max_score << endl;

    // 파일 닫기
    fin.close();
    fout.close();

    // 처리 완료 메시지 출력
    cout << "처리 완료. result.txt를 열어서 결과를 확인하세요." << endl;

    return 0;
}


- while 루프를 통해 파일에서 이름과 점수를 읽어들여 합계를 계산하고, 최고 점수를 갱신하며, 학생 수를 세어줍니다.
- 평균을 계산합니다.
- fout을 사용하여 result.txt 파일에 결과를 출력합니다. 출력할 때 소수점 둘째 자리까지 고정된 형식으로 출력하기 위해 fixed와 setprecision(2)를 사용합니다.

--------------------------------------------------------7번--------------------------------------------------------
#include <iostream>
#include <fstream>
using namespace std;

int main() {
    ofstream fout("memo.txt", ios::app);
    if (!fout) {
        cout<< "열기실패"<<endl;
        return 1;
    }
    string s;

    cout<<"메모입력을 시작합니다.(exit 종료)" << endl;
    
    while (true) {
        cout << "==> ";
        getline(cin, s);
        
        if (s == "exit"){
            cout <<"메모가추가되었습니다. memo.txt를확인하세요\n";
            fout << "------------------------------\n\n"; break;
            }
        fout << s << endl;
    }
        
    fout.close();
}
--------------------------------------------------------9번--------------------------------------------------------
#include <iostream>
#include <algorithm>
#include <fstream>
#define N 31
using namespace std;

int main() {
	ifstream fin("sort.txt");
	if (!fin) {
		cerr << "sort.txt 열기 실패" << endl;
		return 1;
	}
	ofstream fout("reslut.txt");
	if (!fout) {
		cerr << "result.txt 열기 실패" << endl;
		return 1;
	}
	double arr[N];
	for (int i = 0; i < N; i++) {
		fin >> arr[i];
	}
	sort(arr, arr + N, greater<double>());
	for (int i = 0; i < N; i++) {
		fout << arr[i] << endl;
	}
	fin.close(); fout.close();
}
--------------------------------------------------------9번--------------------------------------------------------
#include <iostream>
#include <fstream>
#include <string>

using namespace std;

int main() {
    // 입력 파일 및 출력 파일 열기
    ifstream charlie("둘리.txt");
    ofstream puth("dooli.txt");

    // 파일 열기 실패 시 오류 메시지 출력 후 종료
    if (!charlie || !puth) {
        cerr << "파일 열기 실패" << endl;
        return 1;
    }

    // 입력 파일에서 전체 문자열 읽기
    string s;
    getline(charlie, s, '&');

    // 사용자로부터 고치기 전 단어와 고치기 후 단어 입력 받기
    string f, r;
    cout << "고치기 전 단어: ";
    getline(cin, f);

    cout << "고치기 후 단어: ";
    getline(cin, r);

    int sindex = 0;

    // 문자열에서 고치기 전 단어를 찾아 고치기 후 단어로 대체
    while (true) {
        int findex = s.find(f, sindex);
        if (findex == -1) break;

        s.replace(findex, f.length(), r);
        sindex = findex + r.length();
    }

    // 결과를 출력 파일에 저장
    puth << s << endl;

    // 파일 닫기
    charlie.close();
    puth.close();

    // 처리 완료 메시지 출력
    cout << "처리 완료. dooli.txt를 열어서 결과를 확인하세요." << endl;

    return 0;
}

- string 변수 s를 선언하여 입력 파일에서 전체 문자열을 읽어옵니다. getline 함수를 사용하여 '&' 문자를 구분자로 사용하여 읽어옵니다.
- 사용자로부터 고치기 전 단어 f와 고치기 후 단어 r을 입력받습니다.
- sindex 변수를 초기화합니다.
- while 루프를 사용하여 문자열에서 고치기 전 단어를 찾아 고치기 후 단어로 대체합니다.
- find 함수를 사용하여 고치기 전 단어의 인덱스를 찾습니다. 만약 찾지 못하면 루프를 종료합니다.
- replace 함수를 사용하여 고치기 전 단어를 고치기 후 단어로 대체합니다. 대체된 이후의 인덱스를 sindex에 저장합니다.
